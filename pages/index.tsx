import Head from 'next/head';
import Image from 'next/image';
import fs from 'fs';
import path from 'path';
import { useState } from 'react';
import { createPortal } from 'react-dom';

const customLinks = Array(9).fill("https://t.me/jeffersonx");

const customTitles = [
  "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–µ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ",
  "–û—Å—ñ–Ω—å",
  "–§—É—Ç—É—Ä–∏–∑–º",
  "–ì—Ä–∞—Ñ—ñ—Ç—ñ",
  "–ú—ñ–Ω—ñ–º–∞–ª—ñ–∑–º",
  "–ü—ñ–∫—Å–µ–ª—å–Ω–∞",
  "–ü–æ–ø-–∞—Ä—Ç",
  "–†–µ—Ç—Ä–æ —Å—Ç–∏–ª—å",
  "–ê–∫–≤–∞—Ä–µ–ª—å"
];

const customDescriptions = [
  "–¶—è –∫–∞—Ä—Ç–∏–Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ö–∞–æ—Å —ñ –≥–∞—Ä–º–æ–Ω—ñ—é –æ–¥–Ω–æ—á–∞—Å–Ω–æ, —Å—Ç–≤–æ—Ä—é—é—á–∏ –ø–æ—Ç—É–∂–Ω–∏–π –µ–º–æ—Ü—ñ–π–Ω–∏–π –µ—Ñ–µ–∫—Ç.",
  "–¢–µ–ø–ª—ñ —Ç–æ–Ω–∏, –ª–∏—Å—Ç—è, –Ω–æ—Å—Ç–∞–ª—å–≥—ñ—è. –û—Å—ñ–Ω–Ω—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π –≤ –∫–æ–∂–Ω–æ–º—É –ø—ñ–∫—Å–µ–ª—ñ.",
  "–ú–∞–π–±—É—Ç–Ω—î –≤–∂–µ —Ç—É—Ç ‚Äî –º–µ—Ö–∞–Ω—ñ–∫–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, –∫–æ—Å–º–æ—Å.",
  "–í—É–ª–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è, –≥—Ä–∞—Ñ—ñ—Ç—ñ-–∫—É–ª—å—Ç—É—Ä–∞ —ñ –≤—ñ–ª—å–Ω–µ —Å–∞–º–æ–≤–∏—Ä–∞–∂–µ–Ω–Ω—è.",
  "–ú—ñ–Ω—ñ–º–∞–ª—ñ–∑–º —É –∫–æ–∂–Ω–æ–º—É —à—Ç—Ä–∏—Ö—É ‚Äî –º–µ–Ω—à–µ –∑–Ω–∞—á–∏—Ç—å –±—ñ–ª—å—à–µ.",
  "–ü—ñ–∫—Å–µ–ª—å–Ω–∞ –∫—Ä–∞—Å–∞ —Ü–∏—Ñ—Ä–æ–≤–æ—ó –µ–ø–æ—Ö–∏ ‚Äî —Ä–µ—Ç—Ä–æ —Ç–∞ –º–∞–π–±—É—Ç–Ω—î –≤ –æ–¥–Ω–æ–º—É –∫–∞–¥—Ä—ñ.",
  "–Ø—Å–∫—Ä–∞–≤—ñ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ —Ä–∏—Ç–º –ø–æ–ø-–∫—É–ª—å—Ç—É—Ä–∏, —â–æ –∫—Ä–∏—á–∏—Ç—å –ø—Ä–æ —Å–≤–æ–±–æ–¥—É.",
  "–í—ñ–Ω—Ç–∞–∂–Ω–∞ –µ—Å—Ç–µ—Ç–∏–∫–∞ –º–∏–Ω—É–ª–æ–≥–æ, —è–∫–∞ –æ–∂–∏–≤–∞—î –≤ –Ω–æ–≤–æ–º—É —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ.",
  "–õ–µ–≥–∫—ñ—Å—Ç—å –∞–∫–≤–∞—Ä–µ–ª—ñ –ø–µ—Ä–µ–¥–∞—î –≤—ñ–¥—á—É—Ç—Ç—è —Å–ø–æ–∫–æ—é, –º—Ä—ñ–π–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ."
];

export async function getStaticProps() {
  const imagesDir = path.join(process.cwd(), 'public/img');
  const files = fs.readdirSync(imagesDir);
  const images = files
    .filter((file) => /\.(jpe?g|png|gif)$/i.test(file))
    .map((file, index) => ({
      src: `/img/${file}`,
      title: customTitles[index] || `–ö–∞—Ä—Ç–∏–Ω–∞ ${index + 1}`,
      description: customDescriptions[index] || ''
    }));
  return { props: { images } };
}

export default function Home({ images }: { images: { src: string; title: string; description: string }[] }) {
  const [selected, setSelected] = useState<null | { src: string; title: string; description: string }>(null);
  const [theme, setTheme] = useState<'dark' | 'light'>('dark');

  return (
    <>
      <Head>
        <title>–ì–∞–ª–µ—Ä–µ—è –ö–ê–†–¢–ò–ù–ò ‚Äî NFT –∫–æ–ª–µ–∫—Ü—ñ—è</title>
        <meta name="description" content="–û–Ω–ª–∞–π–Ω-–≥–∞–ª–µ—Ä–µ—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç–∏–Ω —É —Å—Ç–∏–ª—ñ NFT. –ö—É–ø—É–π—Ç–µ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ!" />
        <meta property="og:title" content="–ì–∞–ª–µ—Ä–µ—è –ö–ê–†–¢–ò–ù–ò" />
        <meta property="og:description" content="–¶–∏—Ñ—Ä–æ–≤–µ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ, —è–∫–µ –º–æ–∂–Ω–∞ –ø—Ä–∏–¥–±–∞—Ç–∏ —è–∫ NFT. –ï–∫—Å–ø—Ä–µ—Å—ñ—è, —Å—Ç–∏–ª—å, —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å." />
        <meta property="og:image" content="/preview.png" />
      </Head>

      <main className={`${theme === 'dark' ? 'bg-neutral-900 text-white' : 'bg-white text-black'} min-h-screen p-6`}>
        <div className="relative mb-10">
  <h1 className="text-3xl sm:text-4xl font-bold text-center">–ì–∞–ª–µ—Ä–µ—è –ö–ê–†–¢–ò–ù–ò üñºÔ∏è</h1>
  <button
    onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
    className="fixed top-5 right-5 z-50 border px-3 py-1 rounded bg-neutral-800 text-white shadow-md hover:bg-neutral-700"
  >
    {theme === 'dark' ? '‚òÄÔ∏è –°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞' : 'üåô –¢–µ–º–Ω–∞ —Ç–µ–º–∞'}
  </button>
</div>


        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {images.map((img, index) => (
            <div key={index} className="rounded-xl overflow-hidden shadow-lg">
              <Image
  src={img.src}
  alt={img.title}
  width={300}
  height={300}
  layout="responsive"
  objectFit="cover"
                className="cursor-pointer hover:scale-105 transition"
                onClick={() => setSelected(img)}
              />
              <div className="p-2 text-center font-semibold">{img.title}</div>
              <div className="text-center pb-2">
                <a
                  href={customLinks[index]}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="inline-block bg-green-600 hover:bg-green-700 text-white px-4 py-1 rounded"
                >
                  –ö—É–ø–∏—Ç–∏ —è–∫ NFT
                </a>
              </div>
            </div>
          ))}
        </div>

        {selected && createPortal(
          <div
            className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-4"
            onClick={() => setSelected(null)}
          >
            <div
              className="relative w-full max-w-[900px] max-h-[90vh] overflow-hidden bg-neutral-900 rounded-xl shadow-lg"
              onClick={(e) => e.stopPropagation()}
            >
              {/* –ó–∞–∫—Ä–∏—Ç–∏ */}
              <button
                className="absolute top-3 right-3 text-white text-2xl hover:text-red-500 z-10"
                onClick={() => setSelected(null)}
              >
                &times;
              </button>

              {/* –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è */}
              <div className="relative w-full aspect-[4/3] bg-black">
                <Image
                  src={selected.src}
                  alt={selected.title}
                  fill
                  className="object-contain rounded-t-xl"
                  sizes="(max-width: 768px) 100vw, 800px"
                />
              </div>

              {/* –¢–µ–∫—Å—Ç –ø—ñ–¥ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º */}
              <div className="bg-neutral-900 text-white text-center px-6 py-4">
                <div className="text-2xl font-bold">{selected.title}</div>
                <div className="text-base italic mt-2">{selected.description}</div>
              </div>
            </div>
          </div>,
          document.body
        )}
      </main>
    </>
  );
}
